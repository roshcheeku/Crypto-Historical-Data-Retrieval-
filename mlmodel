The provided code snippet is a complete Python script designed for predicting future percentage differences in cryptocurrency prices using historical data. It employs a Random Forest regression model to predict how much the future highs and lows of cryptocurrency prices will differ from a given closing price. Here's a breakdown and explanation of the main components of the code:

### Overview of Key Functions

1. **Importing Libraries:**
   - The script uses several libraries:
     - `pandas` for data manipulation and reading Excel files.
     - `sklearn.model_selection` for splitting data into training and testing sets.
     - `sklearn.ensemble` for creating Random Forest models.
     - `sklearn.metrics` for evaluating model performance.
     - `pickle` for saving and loading the trained models.

2. **Function `calculate_future_metrics`:**
   - This function takes a DataFrame `df` and a variable `variable2`, which determines the number of days for future predictions.
   - It calculates the maximum high price and minimum low price for the next `variable2` days using shifting and rolling functions. 
   - It also computes the percentage difference from the current close price to the anticipated future high and low prices.
   - The modified DataFrame is returned.

3. **Function `train_model`:**
   - The main purpose here is to read historical cryptocurrency data from an Excel file. It processes each sheet in the Excel file by calculating future metrics.
   - The code checks for the existence of a sheet named 'BTC_USD', which is assumed to contain Bitcoin price data. If absent, it raises an error.
   - The function separates the features (Open, High, Low, Close) and the target variables (future percentage differences for high and low).
   - It splits the data into training and testing sets, trains two Random Forest regression models (one for predicting the future high and one for the future low), and predicts the percentage differences.
   - The Mean Squared Error (MSE) of these predictions is calculated and printed.
   - Finally, the trained models are saved into pickle files for future use, and it returns the MSE results.

4. **Function `predict_outcomes`:**
   - This function is designed to make predictions based on user-provided values.
   - It loads the pre-trained models from the pickle files and predicts the percentage differences based on the input data (open, high, low, close).
   - It returns the predicted percentage differences for high and low prices.

5. **Main Program Execution:**
   - When the script is executed, it first trains the models by calling `train_model()`.
   - It prompts the user to input the values for Open, High, Low, and Close prices.
   - It calls `predict_outcomes()` with these inputs to forecast the future percentage differences and prints the results.

### Important Notes:

- **Error Handling:** The code includes basic error handling for invalid numerical input when the user is prompted for Open, High, Low, and Close values.
- **Model Persistence:** The script saves the trained models to disk using the pickle format, which facilitates future predictions without needing to retrain them.
- **Data Structure:** The code expects the historical price data in an Excel file with specific column names (Open, High, Low, Close) and a sheet named 'BTC_USD'.
- **Use of Random Forest:** The choice of using Random Forest is suitable for regression tasks as it can handle non-linearity and interactions among features effectively.

Overall, this script serves as a training and prediction tool for cryptocurrency price analysis based on historical data, leveraging machine learning techniques.
